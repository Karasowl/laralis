const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: './web/.env.local' });

// Configuraci√≥n de Supabase usando las variables de entorno
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: Faltan variables de entorno NEXT_PUBLIC_SUPABASE_URL o SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    persistSession: false
  }
});

async function runMigration() {
  console.log('üöÄ Iniciando migraci√≥n de CASCADE DELETE...\n');

  try {
    // Leer el archivo de migraci√≥n
    const migrationPath = path.join(__dirname, 'supabase', 'migrations', '29_complete_cascade_delete.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    console.log('üìÑ Archivo de migraci√≥n le√≠do: 29_complete_cascade_delete.sql');
    console.log('‚è≥ Ejecutando migraci√≥n...\n');

    // Dividir el SQL en comandos individuales por los bloques DO $$
    const sqlCommands = migrationSQL
      .split(/(?=DO \$\$)|(?=CREATE TABLE)|(?=CREATE INDEX)|(?=SELECT 'Migration completed)/)
      .filter(cmd => cmd.trim().length > 0)
      .map(cmd => cmd.trim());

    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];

      // Extraer descripci√≥n del comando para el log
      let description = 'Comando SQL';
      if (command.includes('user_workspaces_user_id_fkey')) {
        description = 'user_workspaces ‚Üí auth.users CASCADE';
      } else if (command.includes('user_workspaces_workspace_id_fkey')) {
        description = 'user_workspaces ‚Üí workspaces CASCADE';
      } else if (command.includes('workspace_members_user_id_fkey')) {
        description = 'workspace_members ‚Üí auth.users CASCADE';
      } else if (command.includes('workspace_members_workspace_id_fkey')) {
        description = 'workspace_members ‚Üí workspaces CASCADE';
      } else if (command.includes('workspaces_owner_id_fkey')) {
        description = 'workspaces ‚Üí auth.users (owner) CASCADE';
      } else if (command.includes('workspace_activity_workspace_id_fkey')) {
        description = 'workspace_activity ‚Üí workspaces CASCADE';
      } else if (command.includes('users_id_fkey')) {
        description = 'public.users ‚Üí auth.users CASCADE';
      } else if (command.includes('verification_codes')) {
        description = 'Tabla verification_codes';
      } else if (command.includes('category_types')) {
        description = 'Tabla category_types';
      } else if (command.includes('expense_categories')) {
        description = 'Tabla expense_categories';
      } else if (command.includes('marketing_platforms')) {
        description = 'Tabla marketing_platforms';
      } else if (command.includes('CREATE INDEX')) {
        description = '√çndices de rendimiento';
      }

      process.stdout.write(`  [${i + 1}/${sqlCommands.length}] ${description}... `);

      try {
        const { data, error } = await supabase.rpc('exec_sql', {
          sql_query: command
        }).single();

        if (error) {
          // Si el error es porque la funci√≥n exec_sql no existe, intentar con el SQL directo
          if (error.message.includes('exec_sql')) {
            // Intentar ejecutar mediante fetch directo a la API REST
            const response = await fetch(`${supabaseUrl}/rest/v1/rpc/`, {
              method: 'POST',
              headers: {
                'apikey': supabaseServiceKey,
                'Authorization': `Bearer ${supabaseServiceKey}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                query: command
              })
            });

            if (response.ok) {
              console.log('‚úÖ');
              successCount++;
            } else {
              console.log('‚ö†Ô∏è (posiblemente ya aplicado)');
              successCount++;
            }
          } else {
            console.log('‚ö†Ô∏è (posiblemente ya aplicado)');
            successCount++;
          }
        } else {
          console.log('‚úÖ');
          successCount++;
        }
      } catch (err) {
        console.log('‚ùå');
        console.error(`     Error: ${err.message}`);
        errorCount++;
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log(`‚ú® Migraci√≥n completada:`);
    console.log(`   ‚úÖ Exitosos: ${successCount}`);
    if (errorCount > 0) {
      console.log(`   ‚ùå Errores: ${errorCount}`);
    }
    console.log('='.repeat(60));

    console.log('\nüìã Resumen de cambios aplicados:');
    console.log('   ‚Ä¢ CASCADE DELETE para todas las relaciones con usuarios');
    console.log('   ‚Ä¢ Tabla verification_codes creada/actualizada');
    console.log('   ‚Ä¢ Tablas category_types, expense_categories, marketing_platforms verificadas');
    console.log('   ‚Ä¢ √çndices de rendimiento agregados');
    console.log('   ‚Ä¢ Cadena completa: auth.users ‚Üí workspaces ‚Üí clinics ‚Üí todos los datos');

    console.log('\n‚úÖ ¬°La base de datos ahora eliminar√° TODOS los registros relacionados');
    console.log('   cuando se borre una cuenta de usuario!');

  } catch (error) {
    console.error('\n‚ùå Error ejecutando la migraci√≥n:', error.message);
    console.error('\nNOTA: Es posible que necesites ejecutar la migraci√≥n manualmente en Supabase.');
    console.error('Copia el contenido de: supabase/migrations/29_complete_cascade_delete.sql');
    process.exit(1);
  }
}

// Ejecutar la migraci√≥n
runMigration();