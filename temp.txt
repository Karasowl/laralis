'use client'

import { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import { useRouter } from 'next/navigation'
import {
  ArrowRight,
  Lightbulb,
  RotateCw,
  Sparkles
} from 'lucide-react'
import { useTranslations } from 'next-intl'
import { AppLayout } from '@/components/layouts/AppLayout'
import { PageHeader } from '@/components/ui/PageHeader'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Loading } from '@/components/ui/loading'
import { useWorkspace } from '@/contexts/workspace-context'
import { evaluateRequirements } from '@/lib/requirements'
import { toast } from 'sonner'

type RequirementId =
  | 'depreciation'
  | 'fixed_costs'
  | 'cost_per_min'
  | 'supplies'
  | 'service_recipe'
  | 'tariffs'

type StepDefinition = {
  id: RequirementId
  title: string
  caption: string
  description: string
  points: string[]
  action: { href: string; label: string }
  tip: string
  reflection: { title: string; description: string }
}

const STEP_IDS: RequirementId[] = [
  'depreciation',
  'fixed_costs',
  'cost_per_min',
  'supplies',
  'service_recipe',
  'tariffs'
]

const STEP_ROUTES: Record<RequirementId, string> = {
  depreciation: '/assets',
  fixed_costs: '/fixed-costs',
  cost_per_min: '/time',
  supplies: '/supplies',
  service_recipe: '/services',
  tariffs: '/tariffs'
}

const STEP_POINTS_COUNT: Record<RequirementId, number> = {
  depreciation: 3,
  fixed_costs: 3,
  cost_per_min: 3,
  supplies: 3,
  service_recipe: 3,
  tariffs: 3
}

export default function SetupPage() {
  const router = useRouter()
  const { workspace, currentClinic, refreshWorkspaces, setWorkspace } = useWorkspace()
  const t = useTranslations('setupWizard')
  const stepT = useTranslations('setupWizard.steps')

  const steps = useMemo<StepDefinition[]>(
    () =>
      STEP_IDS.map((id) => ({
        id,
        title: stepT(`${id}.title`),
        caption: stepT(`${id}.caption`),
        description: stepT(`${id}.description`),
        points: Array.from({ length: STEP_POINTS_COUNT[id] }, (_, index) =>
          stepT(`${id}.points.${index}`)
        ),
        action: { href: STEP_ROUTES[id], label: stepT(`${id}.action`) },
        tip: stepT(`${id}.tip`),
        reflection: {
          title: stepT(`${id}.reflection.title`),
          description: stepT(`${id}.reflection.description`)
        }
      })),
    [stepT]
  )

  const [status, setStatus] = useState<Record<RequirementId, boolean>>({
    depreciation: false,
    fixed_costs: false,
    cost_per_min: false,
    supplies: false,
    service_recipe: false,
    tariffs: false
  })
  const [reflectionAcknowledged, setReflectionAcknowledged] = useState<Record<RequirementId, boolean>>({})
  const [activeStepId, setActiveStepId] = useState<RequirementId>(steps[0]?.id ?? 'depreciation')
  const [ready, setReady] = useState(false)
  const [finishing, setFinishing] = useState(false)
  const [checking, setChecking] = useState(false)

  const requirementIds = useMemo<RequirementId[]>(() => steps.map((step) => step.id), [steps])
  const activeStep = steps.find((step) => step.id === activeStepId) ?? steps[0]
  const activeIndex = steps.findIndex((step) => step.id === activeStepId)
  const nextStep = activeIndex >= 0 ? steps[activeIndex + 1] : undefined
  const firstPendingIndex = useMemo(() => steps.findIndex((step) => !status[step.id]), [steps, status])
  const maxAccessibleIndex = firstPendingIndex === -1 ? steps.length - 1 : firstPendingIndex
  const canAdvance = Boolean(status[activeStepId])

  const activePoints = activeStep?.points ?? []

  const completedSteps = steps.filter((step) => status[step.id]).length
  const progressValue = steps.length ? Math.round((completedSteps / steps.length) * 100) : 0
  const allDone = steps.length > 0 && completedSteps === steps.length

  const clinicId = useMemo(() => {
    if (currentClinic?.id) return currentClinic.id
    try {
      if (typeof document !== 'undefined') {
        const cookieMatch = document.cookie.match(/(?:^|; )clinicId=([^;]+)/)
        if (cookieMatch) return decodeURIComponent(cookieMatch[1])
      }
      if (typeof localStorage !== 'undefined') {
        const stored = localStorage.getItem('selectedClinicId')
        if (stored) return stored
      }
    } catch {}
    return undefined
  }, [currentClinic?.id])

  const mountedRef = useRef(true)
  useEffect(() => {
    return () => {
      mountedRef.current = false
    }
  }, [])

  const refreshStatus = useCallback(async (): Promise<Set<RequirementId> | null> => {
    if (!clinicId || !mountedRef.current) return null
    setChecking(true)
    try {
      const result = await evaluateRequirements({ clinicId }, requirementIds)
      const missing = new Set(result.missing || [])
      if (!mountedRef.current) return missing
      setStatus((prev) => {
        const next = { ...prev }
        for (const id of requirementIds) {
          next[id] = !missing.has(id)
        }
        return next
      })
      return missing
    } catch (error) {
      if (mountedRef.current) {
        console.error('Failed to evaluate setup requirements', error)
        toast.error(t('toasts.checkError'))
      }
      return null
    } finally {
      if (mountedRef.current) {
        setChecking(false)
      }
    }
  }, [clinicId, requirementIds, t])

  useEffect(() => {
    if (!clinicId) {
      setReady(true)
      return
    }

    let isMounted = true
    ;(async () => {
      try {
        await refreshStatus()
      } finally {
        if (isMounted) {
          setReady(true)
        }
      }
    })()

    return () => {
      isMounted = false
    }
  }, [clinicId, refreshStatus])

  const acknowledgeReflection = useCallback(
    (stepId: RequirementId) => {
      setReflectionAcknowledged((prev) => ({ ...prev, [stepId]: true }))
      toast.success(t('toasts.finishSuccess'))
    },
    [t]
  )

  const finishSetup = useCallback(async () => {
    if (finishing || !allDone) return

    if (!workspace?.id) {
      toast.error(t('toasts.workspaceMissing'))
      return
    }

    const fallback = t('toasts.finishError')

    setFinishing(true)
    try {
      const response = await fetch(`/api/workspaces/${workspace.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ onboarding_completed: true })
      })

      if (!response.ok) {
        const payload = (await response.json().catch(() => ({}))) as { message?: string }
        throw new Error(payload?.message || fallback)
      }

      try {
        setWorkspace({ ...workspace, onboarding_completed: true })
      } catch {}

      await refreshWorkspaces()
      router.replace('/')
    } catch (error) {
      const message = error instanceof Error ? error.message : fallback
      toast.error(message || fallback)
      setFinishing(false)
    }
  }, [allDone, finishing, refreshWorkspaces, router, setWorkspace, t, workspace])

  if (!ready) {
    return <Loading fullscreen message={t('loading.message')} subtitle={t('loading.subtitle')} />
  }

  const handleNextStep = useCallback(async () => {
    if (!nextStep) return
    if (!canAdvance) {
      const missing = await refreshStatus()
      if (!missing || missing.has(activeStepId)) {
        toast.info(t('navigation.locked'))
        return
      }
    }
    setActiveStepId(nextStep.id)
  }, [nextStep, canAdvance, refreshStatus, activeStepId, t])

  return (
    <AppLayout>
      <div className="mx-auto max-w-6xl space-y-6 p-4 pb-32 lg:p-8 lg:pb-8">
        <PageHeader title={t('header.title')} subtitle={t('header.subtitle')} />

        <Card className="space-y-6 p-6">
          <div className="flex flex-col gap-4 md:flex-row md:items-end md:justify-between">
            <div className="space-y-2">
              <Badge variant={allDone ? 'default' : 'secondary'} className="w-fit">
                {allDone ? t('progress.badge.complete') : t('progress.badge.incomplete')}
              </Badge>
              <h2 className="text-2xl font-semibold">
                {t('progress.count', { completed: completedSteps, total: steps.length })}
              </h2>
              <p className="text-sm text-muted-foreground">{t('progress.description')}</p>
            </div>
            <div className="md:w-64">
              <Progress value={progressValue} className="h-2" />
              <div className="mt-2 flex items-center justify-between text-xs text-muted-foreground">
                <span>{t('progress.label')}</span>
                <span>{t('progress.percent', { value: progressValue })}</span>
              </div>
            </div>
          </div>
          <div className="hidden border-t pt-4 md:block">
            <div className="flex gap-3 overflow-x-auto pb-1">
              {steps.map((step, index) => {
                const done = status[step.id]
                const isActive = step.id === activeStepId
                const locked = firstPendingIndex !== -1 && index > maxAccessibleIndex
                return (
                  <button
                    key={step.id}
                    type="button"
                    onClick={() => {
                      if (locked) {
                        toast.info(t('navigation.locked'))
                        return
                      }
                      setActiveStepId(step.id)
                    }}
                    disabled={locked}
                    className={`min-w-[190px] rounded-xl border px-4 py-3 text-left transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring ${
                      locked
                        ? 'cursor-not-allowed opacity-50'
                        : isActive
                          ? 'border-primary bg-primary/10 shadow-sm'
                          : done
                            ? 'border-emerald-200 bg-emerald-50'
                            : 'border-border/60 bg-muted/20 hover:border-border hover:bg-muted/40'
                    }`}
                  >
                    <span className="text-xs font-semibold uppercase text-muted-foreground">
                      {t('stepper.step', { index: index + 1 })}
                    </span>
                    <p className="text-sm font-semibold leading-tight">{step.title}</p>
                    <p className="text-xs text-muted-foreground line-clamp-2">{step.caption}</p>
                  </button>
                )
              })}
            </div>
          </div>
        </Card>

        <div className="space-y-6">
            <Card className="space-y-6 p-6">
              <div className="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
                <div>
                  <span className="text-xs font-semibold uppercase text-muted-foreground">
                    {t('currentStep.label', { index: activeIndex + 1, total: steps.length })}
                  </span>
                  <h2 className="text-xl font-semibold md:text-2xl">{activeStep?.title}</h2>
                  <p className="mt-1 max-w-2xl text-sm text-muted-foreground">
                    {activeStep?.description}
                  </p>
                </div>
                <Badge variant={status[activeStepId] ? 'default' : 'secondary'}>
                  {status[activeStepId] ? t('currentStep.validated') : t('currentStep.inProgress')}
                </Badge>
              </div>

              <div className="rounded-2xl border border-primary/30 bg-gradient-to-br from-primary/10 via-primary/5 to-primary/20 p-5 shadow-sm">
                <p className="text-xs font-semibold uppercase text-primary">
                  {t('primaryPanel.title')}
                </p>
                <h4 className="mt-2 text-lg font-semibold leading-tight">{activeStep?.title}</h4>
                <p className="mt-2 text-sm text-muted-foreground">{activeStep?.caption}</p>
                <div className="mt-4 flex flex-wrap gap-2">
                  <Button
                    size="lg"
                    onClick={() => router.push(activeStep?.action.href ?? '#')}
                    className="flex-1 min-w-[200px] justify-center"
                  >
                    {activeStep?.action.label}
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                  <Button variant="outline" onClick={refreshStatus} disabled={checking}>
                    <RotateCw className="mr-2 h-4 w-4" />
                    {checking ? t('primaryPanel.refreshing') : t('primaryPanel.refresh')}
                  </Button>
                </div>
              </div>

              <div className="rounded-xl border bg-background p-5">
                <div className="flex items-center gap-2 text-sm font-semibold">
                  <Sparkles className="h-4 w-4 text-primary" />
                  {t('guide.title')}
                </div>
                <p className="mt-1 text-xs text-muted-foreground">{t('guide.description')}</p>
                <ul className="mt-4 space-y-3">
                  {activePoints.map((point) => (
                    <li
                      key={point}
                      className="flex items-start gap-3 rounded-lg bg-muted/20 p-3 text-sm leading-snug"
                    >
                      <span className="mt-1 h-2 w-2 rounded-full bg-primary" />
                      {point}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="grid gap-3 md:grid-cols-2">
                <details className="group rounded-xl border bg-amber-50/80 p-4">
                  <summary className="flex cursor-pointer list-none items-center justify-between text-sm font-semibold text-amber-900">
                    <span className="flex items-center gap-2">
                      <Lightbulb className="h-4 w-4" />
                      {t('tip.summary')}
                    </span>
                    <ArrowRight className="h-4 w-4 transition group-open:rotate-90" />
                  </summary>
                  <p className="mt-3 text-sm text-amber-900/90">{activeStep?.tip}</p>
                </details>

                <details className="group rounded-xl border bg-muted/20 p-4">
                  <summary className="flex cursor-pointer list-none items-center justify-between text-sm font-semibold">
                    {t('reflection.summary')}
                    <ArrowRight className="h-4 w-4 transition group-open:rotate-90" />
                  </summary>
                  <p className="mt-2 text-sm text-muted-foreground">
                    {activeStep?.reflection.description}
                  </p>
                  <div className="mt-3 flex flex-wrap gap-2">
                    <Button
                      size="sm"
                      onClick={() => acknowledgeReflection(activeStepId)}
                      variant={reflectionAcknowledged[activeStepId] ? 'default' : 'secondary'}
                    >
                      {reflectionAcknowledged[activeStepId]
                        ? t('reflection.acknowledged')
                        : t('reflection.acknowledge')}
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => router.push(activeStep?.action.href ?? '#')}
                    >
                      {t('reflection.openModule')}
                    </Button>
                  </div>
                </details>
              </div>

              <div className="flex justify-end gap-2 pt-2">
                <Button
                  onClick={nextStep ? handleNextStep : finishSetup}
                  disabled={finishing || (nextStep ? !canAdvance : !allDone)}
                >
                  {nextStep
                    ? t('navigation.nextShort')
                    : allDone
                      ? finishing
                        ? t('navigation.completing')
                        : t('navigation.completeReady')
                      : t('navigation.completeDisabled')}
                </Button>
              </div>
            </Card>
        </div>

        {allDone && (
          <Card className="space-y-6 p-6">
            <div>
              <h3 className="text-xl font-semibold">{t('nextSection.title')}</h3>
              <p className="text-sm text-muted-foreground">{t('nextSection.description')}</p>
            </div>
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              <div className="rounded-xl border bg-muted/20 p-4">
                <p className="text-sm font-semibold">{t('nextSection.cards.patients.title')}</p>
                <p className="mt-1 text-sm text-muted-foreground">
                  {t('nextSection.cards.patients.description')}
                </p>
                <Button
                  className="mt-3 w-full"
                  variant="outline"
                  onClick={() => router.push('/patients')}
                >
                  {t('nextSection.cards.patients.cta')}
                </Button>
              </div>
              <div className="rounded-xl border bg-muted/20 p-4">
                <p className="text-sm font-semibold">{t('nextSection.cards.treatments.title')}</p>
                <p className="mt-1 text-sm text-muted-foreground">
                  {t('nextSection.cards.treatments.description')}
                </p>
                <Button
                  className="mt-3 w-full"
                  variant="outline"
                  onClick={() => router.push('/treatments')}
                >
                  {t('nextSection.cards.treatments.cta')}
                </Button>
              </div>
              <div className="rounded-xl border bg-muted/20 p-4">
                <p className="text-sm font-semibold">{t('nextSection.cards.services.title')}</p>
                <p className="mt-1 text-sm text-muted-foreground">
                  {t('nextSection.cards.services.description')}
                </p>
                <Button
                  className="mt-3 w-full"
                  variant="outline"
                  onClick={() => router.push('/services')}
                >
                  {t('nextSection.cards.services.cta')}
                </Button>
              </div>
            </div>
            <div className="flex flex-wrap gap-2">
              <Button variant="outline" onClick={() => router.push('/patients')}>
                {t('nextSection.cta.patient')}
              </Button>
              <Button variant="outline" onClick={() => router.push('/treatments')}>
                {t('nextSection.cta.treatment')}
              </Button>
              <Button onClick={finishSetup} disabled={!allDone || finishing}>
                {allDone
                  ? finishing
                    ? t('navigation.completing')
                    : t('nextSection.cta.finish')
                  : t('navigation.completeDisabled')}
              </Button>
            </div>
          </Card>
        )}
      </div>
    </AppLayout>
  )
}
