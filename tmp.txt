  }, [selectedPlatformId, campaignForm])

  // Platform handlers
  const handleCreatePlatform = async (data: z.infer<typeof platformSchema>) => {
    if (!currentClinic?.id) {
      return
    }

    const result = await platforms.create({
      ...data,
      clinic_id: currentClinic.id
    })

    if (result.success) {
      setPlatformModalOpen(false)
      platformForm.reset()
    }
  }

  // Campaign handlers
  const handleCreateCampaign = async (data: z.infer<typeof campaignSchema>) => {
    const result = await campaigns.create({
      ...data,
      platform_id: selectedPlatformId
    })

    if (result.success) {
      setCampaignModalOpen(false)
      campaignForm.reset()
    }
  }

  const handleArchiveCampaign = async (campaign: Campaign) => {
    const isArchived = !!campaign.archived_at
    const endpoint = `/api/marketing/campaigns/${campaign.id}/${isArchived ? 'unarchive' : 'archive'}`
    
    const res = await fetch(endpoint, { method: 'PATCH' })
    if (res.ok) {
      campaigns.fetchItems()
    }
  }

  // Platform columns
  const platformColumns = [
    {
      key: 'name',
      label: t('settings.marketing.platformName'),
      render: (platform: Platform) => {
        if (!platform) return null
        return <div className="font-medium">{platform.name}</div>
