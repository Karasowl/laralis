import { createServerClient } from '@supabase/ssr';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // TEMPORAL: Desactivar middleware para debugging
  if (pathname.startsWith('/test-auth')) {
    return NextResponse.next();
  }
  
  // Crear cliente de Supabase para el middleware
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '',
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            supabaseResponse.cookies.set(name, value, options);
          });
        },
      },
    }
  );

  // Skip middleware for static files, api routes
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/api') ||
    pathname.includes('.')
  ) {
    return supabaseResponse;
  }

  // Verificar autenticación
  const {
    data: { user },
  } = await supabase.auth.getUser();

  // Rutas públicas (no requieren autenticación)
  const publicPaths = [
    '/auth/login',
    '/auth/register',
    '/auth/forgot-password',
    '/auth/reset-password',
    '/auth/callback',
    '/auth/debug',
    '/auth/logout',
  ];

  const isPublicPath = publicPaths.some(path => pathname.startsWith(path));

  // Si no hay usuario autenticado y no está en ruta pública
  if (!user && !isPublicPath) {
    const redirectUrl = new URL('/auth/login', request.url);
    redirectUrl.searchParams.set('redirectTo', pathname);
    return NextResponse.redirect(redirectUrl);
  }

  // Si hay usuario autenticado y está intentando acceder a rutas de auth
  if (user && isPublicPath && pathname !== '/auth/callback') {
    return NextResponse.redirect(new URL('/', request.url));
  }

  // Si el usuario está autenticado, verificar si tiene workspaces
  // PERO no hacer esta verificación si ya está en /onboarding
  if (user && !isPublicPath && !pathname.startsWith('/onboarding')) {
    try {
      const response = await fetch(`${request.nextUrl.origin}/api/workspaces`, {
        headers: {
          cookie: request.headers.get('cookie') || '',
        },
      });

      if (response.ok) {
        const data = await response.json();
        
        // Si no hay workspace, redirigir a onboarding
        if (!data.workspace) {
          return NextResponse.redirect(new URL('/onboarding', request.url));
        }
      }
    } catch (error) {
      console.error('Middleware error checking workspaces:', error);
    }
  }
  
  // Si está en onboarding y tiene workspace, redirigir al home
  if (user && pathname.startsWith('/onboarding')) {
    try {
      const response = await fetch(`${request.nextUrl.origin}/api/workspaces`, {
        headers: {
          cookie: request.headers.get('cookie') || '',
        },
      });

      if (response.ok) {
        const data = await response.json();
        if (data.workspace) {
          return NextResponse.redirect(new URL('/', request.url));
        }
      }
    } catch (error) {
      console.error('Middleware error checking onboarding:', error);
    }
  }

  return supabaseResponse;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - images, icons, etc.
     */
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};