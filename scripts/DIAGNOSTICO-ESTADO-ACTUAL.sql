-- =====================================================
-- DIAGN√ìSTICO COMPLETO DEL ESTADO ACTUAL
-- =====================================================
-- Este script muestra EXACTAMENTE qu√© hay en la base de datos
-- Para diagnosticar el problema de "cl√≠nicas fantasma"
-- =====================================================

\echo ''
\echo '========================================'
\echo 'üîç DIAGN√ìSTICO COMPLETO'
\echo '========================================'
\echo ''

-- =====================================================
-- 1. USUARIOS DE AUTENTICACI√ìN
-- =====================================================
\echo '1Ô∏è‚É£  USUARIOS EN AUTH.USERS'
\echo '----------------------------------------'

DO $$
DECLARE
    user_count INT;
BEGIN
    SELECT COUNT(*) INTO user_count FROM auth.users;
    RAISE NOTICE 'Total de usuarios: %', user_count;

    IF user_count = 0 THEN
        RAISE NOTICE '‚úÖ auth.users est√° VAC√çA (correcto si reseteaste)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  auth.users tiene % usuarios (deber√≠a estar vac√≠a)', user_count;
    END IF;
END $$;

SELECT
    id,
    email,
    created_at,
    last_sign_in_at
FROM auth.users
ORDER BY created_at DESC
LIMIT 10;

\echo ''

-- =====================================================
-- 2. WORKSPACES
-- =====================================================
\echo '2Ô∏è‚É£  WORKSPACES'
\echo '----------------------------------------'

DO $$
DECLARE
    workspace_count INT;
    orphan_count INT;
BEGIN
    SELECT COUNT(*) INTO workspace_count FROM workspaces;
    RAISE NOTICE 'Total de workspaces: %', workspace_count;

    -- Verificar hu√©rfanos (workspaces sin owner v√°lido)
    SELECT COUNT(*) INTO orphan_count
    FROM workspaces w
    WHERE NOT EXISTS (SELECT 1 FROM auth.users u WHERE u.id = w.owner_id);

    IF orphan_count > 0 THEN
        RAISE NOTICE '‚ùå Hay % workspaces HU√âRFANOS (sin owner v√°lido)', orphan_count;
        RAISE NOTICE '   Esto causa el problema de "cl√≠nicas fantasma"';
    END IF;

    IF workspace_count = 0 THEN
        RAISE NOTICE '‚úÖ workspaces est√° VAC√çA';
    END IF;
END $$;

SELECT
    w.id,
    w.name,
    w.owner_id,
    CASE
        WHEN EXISTS (SELECT 1 FROM auth.users u WHERE u.id = w.owner_id)
        THEN '‚úÖ Owner existe'
        ELSE '‚ùå HU√âRFANO (owner no existe)'
    END as status,
    w.created_at
FROM workspaces w
ORDER BY w.created_at DESC;

\echo ''

-- =====================================================
-- 3. CL√çNICAS
-- =====================================================
\echo '3Ô∏è‚É£  CL√çNICAS'
\echo '----------------------------------------'

DO $$
DECLARE
    clinic_count INT;
    orphan_count INT;
BEGIN
    SELECT COUNT(*) INTO clinic_count FROM clinics;
    RAISE NOTICE 'Total de cl√≠nicas: %', clinic_count;

    -- Verificar hu√©rfanas (cl√≠nicas cuyo workspace no tiene owner v√°lido)
    SELECT COUNT(*) INTO orphan_count
    FROM clinics c
    INNER JOIN workspaces w ON c.workspace_id = w.id
    WHERE NOT EXISTS (SELECT 1 FROM auth.users u WHERE u.id = w.owner_id);

    IF orphan_count > 0 THEN
        RAISE NOTICE '‚ùå Hay % cl√≠nicas HU√âRFANAS (workspace sin owner)', orphan_count;
        RAISE NOTICE '   Estas son las "cl√≠nicas fantasma" que ves';
    END IF;

    IF clinic_count = 0 THEN
        RAISE NOTICE '‚úÖ clinics est√° VAC√çA';
    END IF;
END $$;

SELECT
    c.id,
    c.name,
    c.workspace_id,
    w.name as workspace_name,
    w.owner_id,
    CASE
        WHEN EXISTS (SELECT 1 FROM auth.users u WHERE u.id = w.owner_id)
        THEN '‚úÖ Owner existe'
        ELSE '‚ùå HU√âRFANA (owner no existe)'
    END as status,
    c.created_at
FROM clinics c
INNER JOIN workspaces w ON c.workspace_id = w.id
ORDER BY c.created_at DESC;

\echo ''

-- =====================================================
-- 4. OTRAS TABLAS CR√çTICAS
-- =====================================================
\echo '4Ô∏è‚É£  OTRAS TABLAS'
\echo '----------------------------------------'

DO $$
DECLARE
    r RECORD;
    row_count BIGINT;
    total_rows BIGINT := 0;
BEGIN
    FOR r IN
        SELECT tablename
        FROM pg_catalog.pg_tables
        WHERE schemaname = 'public'
        AND tablename NOT IN ('workspaces', 'clinics')
        ORDER BY tablename
    LOOP
        EXECUTE format('SELECT COUNT(*) FROM %I', r.tablename) INTO row_count;
        IF row_count > 0 THEN
            RAISE NOTICE '%-30s: % registros', r.tablename, row_count;
            total_rows := total_rows + row_count;
        END IF;
    END LOOP;

    RAISE NOTICE '';
    RAISE NOTICE 'Total de registros en otras tablas: %', total_rows;

    IF total_rows > 0 THEN
        RAISE NOTICE '‚ö†Ô∏è  Hay datos residuales en la base de datos';
    ELSE
        RAISE NOTICE '‚úÖ Todas las dem√°s tablas est√°n vac√≠as';
    END IF;
END $$;

\echo ''

-- =====================================================
-- 5. CATEGORY_TYPES (necesario para onboarding)
-- =====================================================
\echo '5Ô∏è‚É£  CATEGORY_TYPES'
\echo '----------------------------------------'

DO $$
DECLARE
    cat_count INT;
BEGIN
    SELECT COUNT(*) INTO cat_count FROM category_types;
    RAISE NOTICE 'Total de category_types: %', cat_count;

    IF cat_count >= 4 THEN
        RAISE NOTICE '‚úÖ category_types est√° correctamente poblada';
    ELSIF cat_count = 0 THEN
        RAISE NOTICE '‚ùå category_types est√° VAC√çA (onboarding fallar√°)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  category_types tiene solo % tipos (deber√≠a tener 4)', cat_count;
    END IF;
END $$;

SELECT name, display_name FROM category_types ORDER BY name;

\echo ''

-- =====================================================
-- 6. RESUMEN Y DIAGN√ìSTICO FINAL
-- =====================================================
\echo '========================================'
\echo 'üìã RESUMEN Y DIAGN√ìSTICO'
\echo '========================================'

DO $$
DECLARE
    users_count INT;
    workspaces_count INT;
    clinics_count INT;
    orphan_workspaces INT;
    orphan_clinics INT;
    cat_types_count INT;
    problema TEXT := '';
BEGIN
    -- Contar todo
    SELECT COUNT(*) INTO users_count FROM auth.users;
    SELECT COUNT(*) INTO workspaces_count FROM workspaces;
    SELECT COUNT(*) INTO clinics_count FROM clinics;
    SELECT COUNT(*) INTO cat_types_count FROM category_types;

    -- Contar hu√©rfanos
    SELECT COUNT(*) INTO orphan_workspaces
    FROM workspaces w
    WHERE NOT EXISTS (SELECT 1 FROM auth.users u WHERE u.id = w.owner_id);

    SELECT COUNT(*) INTO orphan_clinics
    FROM clinics c
    INNER JOIN workspaces w ON c.workspace_id = w.id
    WHERE NOT EXISTS (SELECT 1 FROM auth.users u WHERE u.id = w.owner_id);

    RAISE NOTICE '';
    RAISE NOTICE 'Estado de la base de datos:';
    RAISE NOTICE '  ‚Ä¢ Usuarios: %', users_count;
    RAISE NOTICE '  ‚Ä¢ Workspaces: % (% hu√©rfanos)', workspaces_count, orphan_workspaces;
    RAISE NOTICE '  ‚Ä¢ Cl√≠nicas: % (% hu√©rfanas)', clinics_count, orphan_clinics;
    RAISE NOTICE '  ‚Ä¢ Category types: %', cat_types_count;
    RAISE NOTICE '';

    -- Diagn√≥stico
    IF users_count = 0 AND workspaces_count = 0 AND clinics_count = 0 THEN
        RAISE NOTICE '‚úÖ ESTADO: Base de datos completamente limpia';
        RAISE NOTICE '   ‚Üí Puedes registrar nuevo usuario y empezar de cero';
        IF cat_types_count < 4 THEN
            RAISE NOTICE '';
            RAISE NOTICE '‚ö†Ô∏è  ADVERTENCIA: category_types no est√° poblada';
            RAISE NOTICE '   ‚Üí Ejecuta el script FIX-ONBOARDING-COMPLETO-V3.sql';
        END IF;
    ELSIF users_count = 0 AND (workspaces_count > 0 OR clinics_count > 0) THEN
        RAISE NOTICE '‚ùå PROBLEMA ENCONTRADO: "Cl√≠nicas Fantasma"';
        RAISE NOTICE '';
        RAISE NOTICE 'Explicaci√≥n:';
        RAISE NOTICE '  ‚Ä¢ Los usuarios fueron borrados de auth.users ‚úÖ';
        RAISE NOTICE '  ‚Ä¢ Pero las tablas NO fueron vaciadas ‚ùå';
        RAISE NOTICE '  ‚Ä¢ Hay % workspaces sin owner v√°lido', orphan_workspaces;
        RAISE NOTICE '  ‚Ä¢ Hay % cl√≠nicas sin owner v√°lido', orphan_clinics;
        RAISE NOTICE '';
        RAISE NOTICE 'Esto explica por qu√©:';
        RAISE NOTICE '  ‚Ä¢ Ves cl√≠nicas viejas en la interfaz';
        RAISE NOTICE '  ‚Ä¢ No puedes crear nuevas cl√≠nicas';
        RAISE NOTICE '  ‚Ä¢ Las pol√≠ticas RLS fallan';
        RAISE NOTICE '';
        RAISE NOTICE 'SOLUCI√ìN:';
        RAISE NOTICE '  1. Ejecutar: scripts/reset-database-FIXED.sql';
        RAISE NOTICE '  2. Verificar que este script reporte "limpia"';
        RAISE NOTICE '  3. Luego ejecutar: scripts/FIX-ONBOARDING-COMPLETO-V3.sql';
        RAISE NOTICE '  4. Registrar nuevo usuario';
        RAISE NOTICE '  5. Completar onboarding';
    ELSIF users_count > 0 THEN
        RAISE NOTICE '‚ÑπÔ∏è  ESTADO: Base de datos en uso';
        RAISE NOTICE '   ‚Üí Hay % usuarios registrados', users_count;
        IF orphan_workspaces > 0 OR orphan_clinics > 0 THEN
            RAISE NOTICE '';
            RAISE NOTICE '‚ö†Ô∏è  Hay registros hu√©rfanos:';
            RAISE NOTICE '   ‚Ä¢ % workspaces sin owner', orphan_workspaces;
            RAISE NOTICE '   ‚Ä¢ % cl√≠nicas sin owner', orphan_clinics;
            RAISE NOTICE '';
            RAISE NOTICE 'SOLUCI√ìN:';
            RAISE NOTICE '  1. Ejecutar: scripts/cleanup-orphans.sql';
        END IF;
    END IF;

    RAISE NOTICE '';
END $$;

\echo '========================================'
\echo ''

-- =====================================================
-- FIN DEL DIAGN√ìSTICO
-- =====================================================
